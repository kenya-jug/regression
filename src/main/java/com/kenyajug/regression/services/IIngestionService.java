package com.kenyajug.regression.services;
/*
 * MIT License
 *
 * Copyright (c) 2025 Kenya JUG
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
import com.kenyajug.regression.entities.AppLog;
import com.kenyajug.regression.entities.LogsDataSource;
import com.kenyajug.regression.entities.LogsMetadata;
import com.kenyajug.regression.models.InstantTraceGroup;
import com.kenyajug.regression.utils.Constants;

import java.io.IOException;
import java.time.LocalDateTime;
import java.time.format.DateTimeParseException;
import java.util.List;
import java.util.Map;
import java.util.Optional;
/*
 * Service interface responsible for ingesting and processing log data from various sources.
 */
public interface IIngestionService {
    /**
     * Initiates the collection of local logs from the current application environment.
     * <p>
     * This method is typically used to trigger a log harvesting process from locally available
     * log files (e.g., those generated by a running Spring Boot/Tomcat application).
     * </p>
     *
     * @return {@code true} if log collection was successfully initiated or completed;
     *         {@code false} if the operation failed or no logs were found.
     */
    boolean processLocalLogs() throws IOException;
    /**
     * Collects raw log data from the specified {@link LogsDataSource}.
     *
     * @param dataSource the data source from which to collect raw logs.
     *                   This could be a local file, API endpoint, or form submission.
     * @throws IOException if IO exception occurs during raw log extraction fails due to IO problems
     * @return a raw string representation of the collected log data.
     */
    String collectRawLogs(LogsDataSource dataSource) throws IOException;
    /**
     * Processes structured trace groups extracted from raw logs and composes application log entries
     * along with their associated metadata.
     *
     * @param dataSource the source of the raw log data, used to determine the parsing or structuring strategy.
     * @param instantTraceGroups a list of {@link InstantTraceGroup} objects, each representing a chunk of related log lines
     *                            grouped by timestamp and execution context.
     * @return a map where each {@link AppLog} is a structured application log entry, and the corresponding list
     *         contains its associated {@link LogsMetadata} entries providing contextual metadata.
     */
    Map<AppLog, List<LogsMetadata>> composeLogsAndMetadata(LogsDataSource dataSource, List<InstantTraceGroup> instantTraceGroups);
    /**
     * Parses a raw log string and organizes it into a list of {@code InstantTraceGroup} objects.
     * <p>
     * Each {@code InstantTraceGroup} represents a logically grouped set of log lines that belong
     * to the same stack trace or error event. This method handles multi-line stack traces
     * and ensures that related log entries are grouped together for easier processing and analysis.
     *
     * @param rawLogs A single string containing raw log data, potentially spanning multiple lines.
     * @return A list of {@code InstantTraceGroup} objects, each representing a grouped stack trace from the logs.
     */
    List<InstantTraceGroup> composeRawLogsTraceGroup(String rawLogs);
    /**
     * Extracts the timestamp from a single-line log entry and converts it to a {@link LocalDateTime}.
     * <p>
     * The expected timestamp format is {@code dd-MMM-yyyy HH:mm:ss.SSS}, such as:
     * {@code 15-May-2025 14:32:10.213}. If the log line contains a valid timestamp
     * at the beginning, it will be parsed into a {@code LocalDateTime} object.
     * <p>
     * If the timestamp is missing or malformed, an appropriate exception (e.g., {@code DateTimeParseException}
     * or {@code IllegalArgumentException}) may be thrown depending on the implementation.
     *
     * @param singleLineLog A single line from the raw log file, typically starting with a timestamp.
     * @return The extracted {@code Optional<LocalDateTime>} representing the timestamp in the log entry.
     * @throws DateTimeParseException if the timestamp format is invalid or cannot be parsed.
     * @throws IllegalArgumentException if the input is null or doesn't contain a recognizable timestamp.
     */
    Optional<LocalDateTime> extractTimestamp(String singleLineLog) throws DateTimeParseException;
    /**
     * Attempts to extract the log level (e.g., INFO, DEBUG, ERROR, WARN) from the provided trace group.
     *
     * <p>This method analyzes the given {@link InstantTraceGroup} to determine the log level associated
     * with the trace. If the log level can be determined, it is returned as a {@link String}; otherwise,
     * an empty {@link Optional} is returned.</p>
     *
     * @param traceGroup the trace group from which to extract the log level
     * @return an {@link Optional} containing the log level if found; otherwise, an empty {@link Optional}
     */
    Optional<String> extractLogLevel(InstantTraceGroup traceGroup);
    /**
     * Extracts a single {@link LogsMetadata} object from the provided {@link InstantTraceGroup} using the specified regular expression.
     *
     * <p>This method searches the trace content associated with the given {@link InstantTraceGroup} using the provided regex pattern.
     * If a match is found, a new {@link LogsMetadata} instance is created and returned, linked to the given {@link AppLog}.
     * If no match is found, an empty {@link Optional} is returned.</p>
     *
     * @param appLog the application log to associate with the extracted metadata
     * @param traceGroup the trace group containing the log content to search
     * @param regex the regular expression pattern used to extract the metadata value
     * @return an {@link Optional} containing the extracted {@link LogsMetadata} if a match is found; otherwise, an empty {@link Optional}
     */
    Optional<LogsMetadata> extractMetadataByRegex(AppLog appLog, InstantTraceGroup traceGroup, Constants.Tuple regex);

    void saveAppLog(AppLog appLog) ;
}

